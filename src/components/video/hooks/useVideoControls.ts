
import { useState } from 'react';
import { toast } from 'sonner';

interface UseVideoControlsProps {
  isRealVideo: boolean;
  videoRef: React.RefObject<HTMLVideoElement>;
  audioRef: React.RefObject<HTMLAudioElement>;
  audioEnabled: boolean;
  isPlaying: boolean;
  setIsPlaying: React.Dispatch<React.SetStateAction<boolean>>;
}

export const useVideoControls = ({
  isRealVideo,
  videoRef,
  audioRef,
  audioEnabled,
  isPlaying,
  setIsPlaying,
}: UseVideoControlsProps) => {
  const [isMuted, setIsMuted] = useState(!audioEnabled);
  
  const togglePlay = () => {
    if (!isRealVideo) {
      toast.info("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", {
        icon: "üé¨",
        position: "top-center",
      });
      setIsPlaying(!isPlaying);
      
      // Start or pause the background audio if enabled
      if (audioRef.current) {
        if (!isPlaying && audioEnabled) {
          audioRef.current.play().catch(err => {
            console.error("Failed to play audio:", err);
          });
        } else {
          audioRef.current.pause();
        }
      }
      
      return;
    }
    
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
        if (audioRef.current) audioRef.current.pause();
      } else {
        videoRef.current.play().catch(error => {
          console.error("Error playing video:", error);
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ", {
            icon: "‚ö†Ô∏è"
          });
        });
        
        if (audioRef.current && audioEnabled) {
          audioRef.current.play().catch(err => {
            console.error("Failed to play audio:", err);
          });
        }
      }
      setIsPlaying(!isPlaying);
    }
  };
  
  const toggleMute = () => {
    if (!isRealVideo) {
      toast.info("–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∑–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω", {
        icon: "üîá"
      });
      return;
    }
    
    if (videoRef.current) {
      videoRef.current.muted = !videoRef.current.muted;
      setIsMuted(!isMuted);
    }
  };
  
  const toggleFullscreen = () => {
    if (!isRealVideo) {
      toast.info("–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ", {
        icon: "üñ•Ô∏è"
      });
      return;
    }
    
    if (videoRef.current) {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        videoRef.current.requestFullscreen().catch(error => {
          console.error("Error entering fullscreen:", error);
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º");
        });
      }
    }
  };
  
  const handleDownload = () => {
    toast.info("–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ", {
      icon: "üì•"
    });
  };

  return {
    isMuted,
    togglePlay,
    toggleMute,
    toggleFullscreen,
    handleDownload,
  };
};
